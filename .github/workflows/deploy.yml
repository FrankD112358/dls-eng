name: Deploy Template

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - delete
      region:
        description: 'Region to deploy to'
        required: true
        default: 'us-east-1'
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-2
          - eu-west-1
          - eu-west-2
          - eu-central-1
          - ap-southeast-1
          - ap-northeast-1
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
  pull_request: # deploy on PR merges to main
    types:
      - closed
    branches:
      - main

jobs:
  deploy:
    if: >
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=dls-terraform-states-${{ github.event.inputs.region }}" \
            -backend-config="key=envs/${{ github.event.inputs.environment }}/test.tfstate" \
            -backend-config="region=${{ github.event.inputs.region }}" \
            -backend-config="dynamodb_table=terraform-locks"

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
          cd infra/terraform/data-lake
          terraform apply -auto-approve -var="region=${{ github.event.inputs.region }}"


      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'delete' }}
        run: terraform destroy -auto-approve -var="region=${{ github.event.inputs.region }}"
